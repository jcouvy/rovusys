// -------photos-------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package rovusystem;

import java.awt.Color;
import java.util.ArrayList;

import javax.vecmath.Color3f;
import javax.vecmath.Vector3d;

import simbad.sim.RobotFactory;

public class PhotoRover extends Rover {

    private ArrayList<Scan> storage;
    
    public PhotoRover(Vector3d pos, String name) {
        super(pos, name);
        storage = new ArrayList<Scan>();
        System.out.println("Creating a new PhotoRover object");
        
        RobotFactory.addCameraSensor(this);
    }

    public void scanPosition() {
    	this.setRotationalVelocity(0);
    	this.setTranslationalVelocity(0);
		System.out.println("Rover ["+getName()+"] scanned "+location());
    }

    public boolean sendData() {
	   System.out.println("Rover ["+getName()+"] sent data to " + subject.toString());
	   return true;
    }
 
    public void freeStorage() {
        storage.clear();
        System.out.println("Clearing storage");
    }
    
    public void update() {
    	if (getState() == "FINAL") return;
        if (subject.getRequest() == ERequest.SCAN) {
            setState("SCANNING");
        }
    }
    
    /** This method is called cyclically (20 times per second) by the simulator engine. */
    @Override
    public void performBehavior() {

    	if (getState() != "IDLE" & getState() != "FINAL") {
    		
    		if (this.collisionDetected() | this.anOtherAgentIsVeryNear()) {
        		setState("COLLISION");
        	}
    		
    		if (this.getCounter() >= 1000) {
    			setState("ENDING");
    		}
    		
	    	switch(getState()) {
	    		case "SCANNING":
	    			setColor(new Color3f(Color.GREEN));
	    	   		drive();
	    	   		if (timer(5)) scanPosition();
	                if (timer(100)) setRotationalVelocity(Math.PI / 2 * (0.5 - Math.random()));
	                break;
	    		case "COLLISION":
	       			setColor(new Color3f(Color.RED));
	       			avoid();
	       			setState("SCANNING");
	             	break;
	    		case "ENDING":
	    			shutdown();
	    			break;
	    		case "FINAL":
	    			break;
	    	}
		}
	}
};
