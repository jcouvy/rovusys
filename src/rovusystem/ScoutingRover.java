// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package rovusystem;

import java.awt.Color;
import java.util.ArrayList;

import javax.vecmath.Color3f;
import javax.vecmath.Vector3d;

import simbad.sim.RobotFactory;

public class ScoutingRover extends Rover {

	/** The storage should be an ArrayList<Coordinate>, for the sake of
	 *  simplicity it will Strings instead. Otherwise it would require
	 *  to create a Coordinate from a Vec3d.
	 */
    private ArrayList<String> storage;

    public ScoutingRover(Vector3d pos, String name) {
        super(pos, name);
        storage = new ArrayList<String>();
        System.out.println("Creating a new ScoutingRover object");
        
        RobotFactory.addBumperBeltSensor(this, 12);
    }

    /** Inform that the Rover found an obstacle and locate where. 
     *  If the storage is full (ie. size is 100 in our impl)
     *  then the rover clears it.
     */
    public void savePosition() {
    	// Storage is 3 to show the behavior in the simulation video.
    	if (storage.size() == 3) freeStorage();
    	String pos = new String("Rover ["+getName()+"] found an obstacle at "+location());
    	storage.add(pos);
        System.out.println(pos);
    }

    /** Empty the storage **/
    public void freeStorage() {
        storage.clear();
        System.out.println("Rover ["+getName()+"] has cleared storage");
    }

    /** Informs that the Rover is updating,
     *  Changes its State from IDLE to SCOUTING(active) if the request is EXPLORE
     *  If the state is FINAL, the rover does nothing (same as state-chart)
     */
    public void update() {
    	super.update();
    	if (getState() == "FINAL") return;
        if (subject.getRequest() == ERequest.EXPLORE) {
            setState("SCOUTING");      
        }
    }
    
    /** Informs that the Rover's mission is complete,
     *  the Central Station goes to its next request
     */
    public void missionDone() {
    	super.missionDone();
    	subject.setRequest(ERequest.SCAN);
    	subject.notifyObservers();
    }
    
    /** This method is called cyclically (20 times per second) by the simulator engine. **/
    @Override
    public void performBehavior() {
    	
		if (getState() != "FINAL") {
			if (this.collisionDetected() | this.anOtherAgentIsVeryNear()) {
	    		setState("COLLISION");
			}
			// We consider that the rover has finished his work when the counter hits 500 (easier sim).
			if (this.getCounter() == 500) {
				setState("ENDING");
			}
    	}
		
		switch(getState()) {
			case "IDLE" :
				break;
			case "SCOUTING":
				setColor(new Color3f(Color.CYAN));
				drive();
				if (timer(100)) setRotationalVelocity(Math.PI / 2 * (0.5 - Math.random()));
				break;
			case "COLLISION":
				setColor(new Color3f(Color.RED));
				if (storage.size() == 3) sendData();
				savePosition();
				reverse();
				setState("SCOUTING");
				break;
			case "ENDING":
				setColor(new Color3f(Color.CYAN));
				shutdown();
				missionDone();
				break;
			case "FINAL":
				return;
		}
    }
};
